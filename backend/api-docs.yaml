openapi: 3.0.0
info:
  title: CambrianAssignment API
  version: 1.0.0
  description: API documentation for CambrianAssignment backend endpoints
servers:
  - url: http://localhost:3000/api
paths:
  /activity:
    post:
      summary: Log a manual activity for an organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orgId:
                  type: integer
                message:
                  type: string
      responses:
        '200':
          description: Activity logged
          content:
            application/json:
              schema:
                type: object
                properties:
                  activity:
                    $ref: '#/components/schemas/Activity'
        '403':
          description: Not a member
        '500':
          description: Server error
  /activity/{orgId}:
    get:
      summary: Get recent activity for an organization
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Recent activity
          content:
            application/json:
              schema:
                type: object
                properties:
                  activity:
                    type: array
                    items:
                      $ref: '#/components/schemas/Activity'
        '403':
          description: Not a member
        '500':
          description: Server error
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: User already exists
        '500':
          description: Server error
  /auth/login:
    post:
      summary: Login and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid credentials
        '500':
          description: Server error
  /organizations:
    post:
      summary: Create an organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Organization created
          content:
            application/json:
              schema:
                type: object
                properties:
                  organization:
                    $ref: '#/components/schemas/Organization'
        '500':
          description: Server error
    get:
      summary: Get all organizations for logged-in user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                type: object
                properties:
                  organizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organization'
        '500':
          description: Server error
  /organizations/join:
    post:
      summary: Join an organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orgId:
                  type: integer
      responses:
        '200':
          description: Joined organization
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Already a member
        '500':
          description: Server error
  /organizations/{orgId}/join:
    post:
      summary: Add a user to an organization
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                role:
                  type: string
      responses:
        '200':
          description: User added to organization
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  membership:
                    $ref: '#/components/schemas/Membership'
        '400':
          description: Missing userId
        '500':
          description: Server error
  /organizations/{orgId}:
    get:
      summary: Get organization details by ID
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  userRole:
                    type: string
        '404':
          description: Not found
        '500':
          description: Server error
  /organizations/{orgId}/members:
    get:
      summary: Get organization members
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Organization members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Server error
  /organizations/{orgId}/projects:
    get:
      summary: Get projects for an organization
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Projects for organization
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '500':
          description: Server error
  /projects:
    post:
      summary: Create a project within an organization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orgId:
                  type: integer
                name:
                  type: string
      responses:
        '200':
          description: Project created
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    $ref: '#/components/schemas/Project'
        '403':
          description: Not a member
        '500':
          description: Server error
  /projects/{orgId}:
    get:
      summary: List all projects for an organization
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Projects list
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
        '403':
          description: Not a member
        '500':
          description: Server error
  /projects/{projectId}/tasks:
    get:
      summary: Get all tasks for a project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Tasks for project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          description: Server error
  /tasks:
    post:
      summary: Create a task (Admins only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId:
                  type: integer
                title:
                  type: string
                assignee:
                  type: integer
      responses:
        '200':
          description: Task created
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/Task'
        '404':
          description: Project not found
        '403':
          description: Not admin
        '500':
          description: Server error
  /tasks/{taskId}:
    parameters:
      - name: taskId
        in: path
        required: true
        schema:
          type: integer
    patch:
      summary: Update task status (members can only update assigned tasks)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
        '403':
          description: Not allowed
        '500':
          description: Server error
    delete:
      summary: Delete a task (Admins only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Task deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Not found
        '403':
          description: Not admin
        '500':
          description: Server error
  /tasks/{id}:
    patch:
      summary: Update task status (admin or assignee)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
      responses:
        '200':
          description: Task status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Not found
        '403':
          description: Forbidden
        '500':
          description: Server error
  /tasks/{projectId}:
    get:
      summary: List tasks for a project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Tasks list
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '404':
          description: Project not found
        '500':
          description: Server error
  /tasks/task/{id}:
    get:
      summary: Get a single task by ID (admins and assigned users)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                type: object
                properties:
                  task:
                    $ref: '#/components/schemas/Task'
        '404':
          description: Not found or no access
        '500':
          description: Server error
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Activity:
      type: object
      properties:
        id:
          type: integer
        org_id:
          type: integer
        message:
          type: string
        created_at:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        role:
          type: string
    Organization:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        userRole:
          type: string
    Membership:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        org_id:
          type: integer
        role:
          type: string
    Project:
      type: object
      properties:
        id:
          type: integer
        org_id:
          type: integer
        name:
          type: string
        created_at:
          type: string
          format: date-time
    Task:
      type: object
      properties:
        id:
          type: integer
        project_id:
          type: integer
        title:
          type: string
        assignee:
          type: integer
        status:
          type: string
        created_at:
          type: string
          format: date-time
